// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "ZeroAgencyTest/internal/service/news_service/models"
	context "context"

	mock "github.com/stretchr/testify/mock"

	repositorymodels "ZeroAgencyTest/internal/repository/models"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetNews provides a mock function with given fields: ctx
func (_m *Repository) GetNews(ctx context.Context) ([]models.News, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetNews")
	}

	var r0 []models.News
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.News, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.News); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.News)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNews provides a mock function with given fields: ctx, news, newsCategories
func (_m *Repository) UpdateNews(ctx context.Context, news *repositorymodels.News, newsCategories *repositorymodels.NewsCategories) error {
	ret := _m.Called(ctx, news, newsCategories)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNews")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *repositorymodels.News, *repositorymodels.NewsCategories) error); ok {
		r0 = rf(ctx, news, newsCategories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
